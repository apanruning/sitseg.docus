layer.json
y
from django.contrib.gis.utils import srs
srs
srs.connections
srs.connections()
srs.connections.all
srs.connections.all()
from django.contrib.gis.utils import add_postgis_srs
add_postgis_srs(900913)
y
from djangoosm.utils.model import import_and_update
from djangoosm.utils.model inport import_and_update
from djangoosm.utils.model import import_and_update
from djangoosm.utils.model import inport_and_update
inport_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
y
from djangoosm.utils.model import osmosis
from djangoosm.utils.model import inport_and_update
inport_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
t
y
from djangoosm.utils.model import inport_and_update
inport_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
from maap.models import MaapPoint
MaapPoint.get(name="aaa").geom
MaapPoint.objects.get(name="aaa").geom
geom1 = MaapPoint.objects.get(name="aaa").geom
geom1.lat
geom1.wkt
[-3496867.0638600001, -9397087.5764659997]
geom1.json
y
from djangoosm.utils.model import inport_and_update
inport_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
y
from djangoosm.utils.model import inport_and_update
inport_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
y
from djangoosm.utils.model import inport_and_update
y
from djangoosm.utils.model import inport_and_update
y
from djangoosm.utils.model import inport_and_update
from djangoosm.utils.model import import_and_update
import_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
y
import_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
from djangoosm.utils.model import import_and_update
import_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
y
from djangoosm.utils.model import import_and_update
import_and_update("/home/fran/Escritorio/cordoba-23-06-10.osm")
y
from turtle import Turtle
t = Turtle()
t.right(90)
t.fw(10)
t.forward(10)
t.forward(100)
t.getcanvas
t.get_poly()
t.getscreen()
t.getpen
t.getpen()
t.fill(true)
t.fill(True)
for i in range(0,4):
    t.forward(50)
    t.left(90)
    
import turtle
y
"asdf ".strip()
"asdf ".estrip()
"asdf ".rstrip()
y
ff = open("urls1.txt")
ff
ff.open("urls1.txt")
ff = open("urls1.txt")
line = ff.readline()
line
line.strip()
line.split()
line.split(1)
line.split()[1]
y
fd = open("zipcodes.csv")
import csv
read = csv.reader(fd)
read.next()
coords = [(r[2],r[1]) for r in read]
coords
fd.close()
fd = open("zipcodes.csv")
read = csv.reader(fd)
read.next()
coords = [(float(r[2]),float(r[1])) for r in read]
min(x[0] for x in coords)
max(x[0] for x in coords)
min(x[1] for x in coords)
max(x[1] for x in coords)
from random import randrange
randrange( (7.138289, 70.49469))
randrange( *(7.138289, 70.49469))
from random import uniform
uniform( *(7.138289, 70.49469))
from random import uniform
lat_range = (7.138289, 70.49469)
lon_range = (-176.7874, -64.7346)
def coordGenerator():
    lat = uniform(*lat_range)
    lon = uniform(*lon_range)
    yield (lat, lon)
def coordGenerator():
    lat = uniform(*lat_range)
    lon = uniform(*lon_range)
    yield (lat, lon)
coordGenerator()
gen = coordGenerator()
gen.next()
def coordGenerator():
    while True:
        lat = uniform(*lat_range)
        lon = uniform(*lon_range)
        yield (lat, lon)
gen = coordGenerator()
gen.next()
from zipcodes_catalog import calculateBoundingBox, calculateDistance
from random import uniform
lat_range = (7.138289, 70.49469)
lon_range = (-176.7874, -64.7346)
def coordGenerator():
    while True:
        lat = uniform(*lat_range)
        lon = uniform(*lon_range)
        yield (lat, lon)
def coordRadiusGenerator(coord, radius):
    gen = coordGenerator()
    while True:
        current = gen.next()
        current_dist = calculateDistance(coord[0],coord[1], current[0], current[1])
        if current_dist < radius:
            yield current
gen = coordGenerator()
gen.next()
coord = gen.next()
rad = coordRadiusGenerator(coord, 10)
rad.next()
from zipcodes_catalog import calculateBoundingBox, calculateDistance
def calculateBoundingBox(lat, lon, distance):
    """ returns a bounding box that covers the distance in miles 
        from given location."""
    # Extracted from:
    # http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
    # by Jan Philip Matuschek
    # Chapter 3.1, 3.3
    # Extracted from:
    # http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
    # by Jan Philip Matuschek
    # Chapter 3.1, 3.3
    # calculate angle for given distance in radians
    r = (distance*2*pi)/ratio
    # Extracted from:
    # http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
    # by Jan Philip Matuschek
    # Chapter 3.1, 3.3
    # calculate angle for given distance in radians
    r = (distance*2*pi)/ratio
    # convert coordinates to radians
    lat = lat*cte
    lon = lon*cte
    # Extracted from:
    # http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
    # by Jan Philip Matuschek
    # Chapter 3.1, 3.3
    # calculate angle for given distance in radians
    r = (distance*2*pi)/ratio
    # convert coordinates to radians
    lat = lat*cte
    lon = lon*cte
    lat_min = lat - r
    lat_max = lat + r
    # Extracted from:
    # http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
    # by Jan Philip Matuschek
    # Chapter 3.1, 3.3
    # calculate angle for given distance in radians
    r = (distance*2*pi)/ratio
    # convert coordinates to radians
    lat = lat*cte
    lon = lon*cte
    lat_min = lat - r
    lat_max = lat + r
    #latT = asin(sin(lat)/cos(r))
    # Extracted from:
    # http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
    # by Jan Philip Matuschek
    # Chapter 3.1, 3.3
    # calculate angle for given distance in radians
    r = (distance*2*pi)/ratio
    # convert coordinates to radians
    lat = lat*cte
    lon = lon*cte
    lat_min = lat - r
    lat_max = lat + r
    #latT = asin(sin(lat)/cos(r))         
    lon_delta = asin(sin(r)/cos(lat))
    # Extracted from:
    # http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates
    # by Jan Philip Matuschek
    # Chapter 3.1, 3.3
    # calculate angle for given distance in radians
    r = (distance*2*pi)/ratio
    # convert coordinates to radians
    lat = lat*cte
    lon = lon*cte
    lat_min = lat - r
    lat_max = lat + r
    #latT = asin(sin(lat)/cos(r))         
    lon_delta = asin(sin(r)/cos(lat))
    lon_min = lon - lon_delta  
    lon_max = lon + lon_delta
    return (lat_min/cte, lon_min/cte, lat_max/cte, lon_max/cte)
def calculateDistance(lat1, lon1, lat2, lon2):
    """returns the distance between to coordinates in miles."""
    # from http://mathforum.org/library/drmath/view/51879.html
    # Haversine Formula
    #raise "in decimal degrees: lat1=%s; lat2=%s; lon2=%s; lon1=%s" % (lat1,lat2,lon2,lon1)
    # To convert decimal degrees to radians, multiply the number of 
    # degrees by cte = Pi/180 = 0.017453293 radians/degree.
    lat1 = lat1*cte
    lon1 = lon1*cte
    lat2 = lat2*cte
    lon2 = lon2*cte
    #raise "in radians: lat1=%s; lat2=%s; lon2=%s; lon1=%s" % (lat1,lat2,lon2,lon1)
    R = ratio
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    # a  the square of half of the straight-line distance (chord length)
    # between the two points
    # a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
    a = pow(sin(dlat/2),2.0) + cos(lat1) * cos(lat2) * pow(sin(dlon/2),2.0)
    # c is the great circle distance in radians
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    # d will be in the same units as R
    d = R * c
    return d
y
def calculateDistance(lat1, lon1, lat2, lon2):
    """returns the distance between to coordinates in miles."""
    # from http://mathforum.org/library/drmath/view/51879.html
    # Haversine Formula
    #raise "in decimal degrees: lat1=%s; lat2=%s; lon2=%s; lon1=%s" % (lat1,lat2,lon2,lon1)
    # To convert decimal degrees to radians, multiply the number of 
    # degrees by cte = Pi/180 = 0.017453293 radians/degree.
    lat1 = lat1*cte
    lon1 = lon1*cte
    lat2 = lat2*cte
    lon2 = lon2*cte
    #raise "in radians: lat1=%s; lat2=%s; lon2=%s; lon1=%s" % (lat1,lat2,lon2,lon1)
    R = ratio
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    # a  the square of half of the straight-line distance (chord length)
    # between the two points
    # a = (sin(dlat/2))^2 + cos(lat1) * cos(lat2) * (sin(dlon/2))^2
    a = pow(sin(dlat/2),2.0) + cos(lat1) * cos(lat2) * pow(sin(dlon/2),2.0)
    # c is the great circle distance in radians
    c = 2 * atan2(sqrt(a), sqrt(1-a))
    # d will be in the same units as R
    d = R * c
    return d
lat
lat_range = (7.138289, 70.49469)
lon_range = (-176.7874, -64.7346)
lat_range[0] + (lat_range[1] - lat_range[0])/2
lon_range[0] + (lon_range[1] - lon_range[0])/2
middle_point = (
    lat_range[0] + (lat_range[1] - lat_range[0])/2,
    lon_range[0] + (lon_range[1] - lon_range[0])/2
)
middle_point
out = open("circle.csv",'w')
rad 
def coordGenerator():
    while True:
        lat = uniform(*lat_range)
        lon = uniform(*lon_range)
        yield (lat, lon)
def coordRadiusGenerator(coord, radius):
    gen = coordGenerator()
    while True:
        current = gen.next()
        current_dist = calculateDistance(coord[0],coord[1], current[0], current[1])
        if current_dist < radius:
            yield current
cord=coordRadiusGenerator
cord=coordRadiusGenerator(middle_point, 10)
cord.next()
from random import uniform
cord.next()
cord=coordRadiusGenerator(middle_point, 10)
cord.next()
y
 from coords import *
ww = open("circle.csv",'r+')
for i in range(0,1000):
    
gen = coordGenerator(middle_point, 10)
gen = coordRadiusGenerator(middle_point, 10)
for i in range(0,1000):
    ww.write("%f,%f"%(gen.next(),gen.next()))
    
y
 from coords import *
gen = coordRadiusGenerator(middle_point, 10)
ww = open("circle.csv",'r+')
for i in range(0,1000):
    ww.write("%f,%f"%(gen.next(),gen.next()))
    
ww.close()
ww = open("circle.csv",'w')
for i in range(0,1000):
    ww.write("%f, %f" % (gen.next(),gen.next()) )
    
for i in range(0,1000):
    ww.write("%f, %f" % gen.next() )
    
ww.close()
ww = open("circle.csv",'w')
for i in range(0,10):
    ww.write("%f, %f\n" % gen.next() )
    
gen = coordRadiusGenerator(middle_point, 10)
for i in range(0,10):
    ww.write("%f, %f\n" % gen.next() )
    
ww.close()
for i in range(0,500):
    ww.write("%f, %f\n" % gen.next() )
    
ww = open("circle.csv",'r+')
for i in range(0,500):
    ww.write("%f, %f\n" % gen.next() )
    
y
from simplejson import dumps
dumps(['asdf','fff'])
y
"asdfasf".isdigit
"asdfasf".isdigit()
"324342".isdigit()
int(" 343")
int(" 343   ")
" 343   ".isdigit()
strip
value.strip()
y
True xor False
True or False
y
[1,2].get(0)
y
xx = set([3,4,5])
xx.update(1)
xx.add(1)
xx
"hola".split()
y
2.even
x = 2
x.imag
x
y
from django import *
y
import django
y
john = User(email='jdoe@example.com')
john.first_name = 'John'
john.last_name = 'Doe'
john.save()
john = User(email='jdoe@example.com')
from documents.models import *
john = User(email='jdoe@example.com', first_name='John', last_name='Doe')
john.save()
john = User(email='arthur@example.com', first_name='CCJohn', last_name='Dffoe')
jhon.save()
john.save()
quit()
y
continue
quit
form.save()
form.keys
quit
form.is_valid
form.is_valid()
dir(form)
form.is_multipart
form.is_multipart()
form.files
gf
vf
f
wiuo
continue
y
form
form.errors()
form.errors
from mongoengine.django.auth import User
User.create_user('admin', 'admin')
continue
form.errors()
form.errors
form.attach
continue
data
iterador =data_formatted(data, datasource.columns_dict)
iterador
iterador()
iterador
[i for i in iterador]
quit
continue
form.is_valid()
dir(form)
form.attach
form.name
quit
fform.is_valid()
fform
fform.save()
fform.errors()
fform.errors
fform.name
fform.author
fform.fields
fform.fields['attach']
fform.fields['attach'].value
dir(fform)
fform.data
fform.files
fform.as_p
fform.as_p()
pprint(fform.as_p())
from pprint import pprint
pprint(fform.as_p())
print(fform.as_p())
fform.data
fform.files
fform.valid()
fform.is_valid()
continue
fform.is_valid()
fform.file['attach']
fform.files
fform.files['attach']
fform.files['attach'].read()
fform.files['attach'].type()
dir(fform.files['attach'])
fform.files['attach'].format
fform.files['attach'].file
continue
fform.is_valid()
quit
fform
form
form.data
form.data['attach'] = request.FILES['attach']
form.save()
form.is_valid()
form.data[u'attach'] = request.FILES['attach']
form.data
continue
column.name
column
column.name
column.label
document
document[column.label]
conn
conn.
dir(conn)
data_collection
dir(data_collection)
data_collection.all()
data_collection.find()
[c._id for c in data_collection.find()]
[c['_id'] for c in data_collection.find()]
[c['_id'] for c in data_collection.find(_id='4e10e4efa105e12766000544')]
[c['_id'] for c in data_collection.find(dict(_id='4e10e4efa105e12766000544'))]
[c['_id'] for c in data_collection.find({'_id':'4e10e4efa105e12766000544'})]
[c['_id'] for c in data_collection.find({'id':'4e10e4efa105e12766000544'})]
[c['_id'] for c in data_collection.find({'_id':'4e10e4efa105e12766000544'})]
from pymongo
[c['_id'] for c in data_collection.find({'_id':'4e10e4efa105e12766000544'})]
